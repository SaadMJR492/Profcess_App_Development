# Generated by Django 2.2.22 on 2021-06-23 04:04

import accounts.models
import django.contrib.auth.validators
from django.db import migrations, models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProfcessUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that Email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('verified_email', models.EmailField(blank=True, max_length=254)),
                ('usertype', models.CharField(blank=True, choices=[('Recruiter', 'Recruiter'), ('Applicant', 'Applicant'), ('College', 'College'), ('Developer', 'Developer')], max_length=15, verbose_name='usertype')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(default='', max_length=128, region='IN')),
                ('company_name', models.CharField(blank=True, max_length=30, verbose_name='company name')),
                ('paid_recruiter', models.BooleanField(default=False)),
                ('college_name', models.CharField(blank=True, max_length=30, verbose_name='college name')),
                ('college_name_stu', models.CharField(blank=True, max_length=30, verbose_name='College name')),
                ('url_of_college', models.CharField(blank=True, max_length=230, verbose_name='url of college')),
                ('college_description', models.CharField(blank=True, max_length=530, verbose_name='collegedescription')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('activated', models.BooleanField(default=False)),
                ('uname', models.CharField(default='', max_length=530)),
                ('mail', models.EmailField(default='', max_length=254)),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(default='', max_length=128, region='IN')),
                ('message', models.CharField(default='', max_length=530)),
                ('is_termnsandconditions', models.BooleanField(default=False, verbose_name='Agree to terms and Conditions')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', accounts.models.ProfcessUserManager()),
            ],
        ),
    ]
